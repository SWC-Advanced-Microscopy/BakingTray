function populateRecipePanel(obj)
    % Called once during the construction of the view class to build the recipe panel.
    % This method is called by the buildWindow method, which in turn is called by
    % the view constructor.
    %
    % The values in the GUI are filled in by the method updateAllRecipeEditBoxesAndStatusText
    % When the values are changed, the callback updateRecipePropertyInRecipeClass runs.



    % The recipeFieldLabels and recipeProperty properties are used by the
    % later for loop to build the text and edit boxes associated with the 
    % recipe.


    obj.recipePropertyNames  = { ...
        'mosaic||scanmode', ...
        'sample||ID', ...
        'mosaic||sliceThickness', ...
        'mosaic||numOpticalPlanes', ...
        'mosaic||numSections', ...
        'mosaic||cuttingSpeed', ...
        'sample||objectiveName', ...
        'mosaic||sectionStartNum', ...
        'mosaic||numOverlapZPlanes', ...
        'mosaic||overlapProportion', ...
                };

    obj.recipeFieldLabels = { ...
        'Scan Mode', ...
        'Sample ID', ...
        'Slice Thickness (mm)', ...
        'Num. Optical Planes', ...
        'Num. Sections', ...
        'Cut Speed (mm/s)', ...
        'Objective Name', ...
        'Section Start Num.', ...
        '# Overlap Z planes', ...
        'XY Overlap Prop.', ...

                };

    obj.recipeToolTips = {...
        'Scan mode (manual or auto-ROI)', ...
        sprintf('String defining the sample ID.\nSpaces will be replaced with underscores.\nNames with leading digits will have a string appended.'), ...
        'Thickness of each slice in mm', ...
        'The number of optical planes within a section', ...
        'Number of sections to cut and image.', ...
        'Cutting speed in mm/s', ...
        'The name of the objective.\nCurrently only used as a note.', ...
        'The numeric ID of the first section', ...
        'Number of overlapping optical planes in Z', ...
        'Proportion of overlap between adjacent tiles', ...
        };


    % Flip because the following loop populates from the bottom up
    %obj.recipeFieldLabels=fliplr(obj.recipeFieldLabels); 
    %obj.recipePropertyNames=fliplr(obj.recipePropertyNames);
    %obj.recipeToolTips=fliplr(obj.recipeToolTips);



    % Define settings to be applied to all edit boxes
    commonRecipeTextEditSettings={'Parent', obj.recipePanel, ...
                'Style','edit', 'Units', 'pixels', 'FontSize', obj.fSize, ...
                'HorizontalAlignment', 'Left', ...
                'Callback',@obj.updateRecipePropertyInRecipeClass};

    % Build the recipe edit boxes using the properties: recipeFieldLabels and recipePropertyNames.
    iH=5; %item height

    for ii=length(obj.recipePropertyNames):-1:1 %So the tab focus moves down the window not up it

        thisProp = strsplit(obj.recipePropertyNames{ii},'||');

        %Add a text label
        obj.recipeTextLabels.(thisProp{1}).(thisProp{2}) = obj.makeRecipeLabel([0,iH+5,140,18], obj.recipeFieldLabels{ii});
        obj.recipeTextLabels.(thisProp{1}).(thisProp{2}).VerticalAlignment='middle';
        %Add a text entry box

        % Certain recipe fields need unusual things done, so we handle those first in the following if statement
        if strcmp(thisProp{2},'sampleSize') 
            %Because sample size is a structure that describes both X and Y
            obj.recipeTextLabels.(thisProp{1}).([thisProp{2},'X']) = obj.makeRecipeLabel([152,iH+7,10,18],'X=');
            obj.recipeTextLabels.(thisProp{1}).([thisProp{2},'Y']) = obj.makeRecipeLabel([215,iH+7,10,18],'Y=');

            obj.recipeEntryBoxes.(thisProp{1}).([thisProp{2},'X']) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Position', [160, iH+5, 36, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', [obj.recipePropertyNames{ii},'||X']);

            obj.recipeEntryBoxes.(thisProp{1}).([thisProp{2},'Y']) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Position', [225, iH+5, 36, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', [obj.recipePropertyNames{ii},'||Y']);

        elseif strcmp(thisProp{2},'scanmode')
            % The scan mode should be a drop-down as there are only a limited range of options.
            % The possibilities are stored in a property of the recipe class attached to the model.
            textEditWidth=145;
            obj.recipeEntryBoxes.(thisProp{1}).(thisProp{2}) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Style', 'popupmenu', ...
                'String', obj.model.recipe.valid_scanMode_values, ...
                'Position', [140, iH+6, textEditWidth, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', obj.recipePropertyNames{ii}); 
        else
            % Now deal with the remaining recipe fields
            % Numeric boxes can be smaller than text boxes, so figure out which is which and set the length:
            if ~isempty(regexp(obj.recipeFieldLabels{ii},'\(mm', 'once')) || ...
                ~isempty(regexp(obj.recipeFieldLabels{ii},'Prop\.', 'once')) || ...
                ~isempty(regexp(obj.recipeFieldLabels{ii},'Num\.', 'once')) 
                textEditWidth=45;
            else
                textEditWidth=145;
            end
            obj.recipeEntryBoxes.(thisProp{1}).(thisProp{2}) = ...
            uicontrol(commonRecipeTextEditSettings{:}, ...
                'Position', [140, iH+5, textEditWidth, 17], ...
                'TooltipString', obj.recipeToolTips{ii}, ...
                'Tag', obj.recipePropertyNames{ii}); %The tag is used by obj.updateRecipePropertyInRecipeClass to update the recipe
        end

        iH = iH + 19;
        % Add an extra gap after certain items
        if strcmp(thisProp{2},'objectiveName')
            % For advanced items at the bottom
            iH = iH+31;
        end
        if strcmp(thisProp{2},'cuttingSpeed')
            iH = iH+0;
        end
        if strcmp(thisProp{2},'ID')
            iH = iH+9;
        end
        if strcmp('sampleSize',thisProp{2})
            iH = iH + 2;
        end

        if strcmp('overlapProportion',thisProp{2})
            iH = iH - 18; % Because the next setting will be on the same line
            obj.recipeTextLabels.(thisProp{1}).(thisProp{2}).HorizontalAlignment='left';
            obj.recipeTextLabels.(thisProp{1}).(thisProp{2}).Position(1)=5;
            obj.recipeEntryBoxes.(thisProp{1}).(thisProp{2}).Position(1)=105;
            obj.recipeEntryBoxes.(thisProp{1}).(thisProp{2}).Position(3)=30;
        end

        if strcmp('numOverlapZPlanes',thisProp{2})
            obj.recipeTextLabels.(thisProp{1}).(thisProp{2}).HorizontalAlignment='left';
            obj.recipeTextLabels.(thisProp{1}).(thisProp{2}).Position(1)=150;
            obj.recipeEntryBoxes.(thisProp{1}).(thisProp{2}).Position(1)=260;
            obj.recipeEntryBoxes.(thisProp{1}).(thisProp{2}).Position(3)=25;
        end

    end

    % The tooltips are optional, so if the user does not wich them, we simply wipe them here
    if obj.suppressToolTips
        p=fields(obj.recipeEntryBoxes);
        for ii=1:length(p)
            tmp=obj.recipeEntryBoxes.(p{ii});
            pp=fields(tmp);
            for kk=1:length(pp)
                set(tmp.(pp{kk}),'TooltipString','')
            end
        end
    end

end %populateRecipePanel
