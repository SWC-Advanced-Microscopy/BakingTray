function buildWindow(obj)
    % This is called once by the constructor to build the main window
    obj.hFig = BakingTray.gui.newGenericGUIFigureWindow('BakingTray_View');

    %Resize the figure window
    pos=get(obj.hFig, 'Position');
    pos(3:4)=[300,465];
    set(obj.hFig, ...
        'Position',pos, ... 
        'units','pixels', ...
        'DockControls','off', ...
        'Name', 'BakingTray')

    % Closing the figure closes BakingTray
    set(obj.hFig,'CloseRequestFcn', @obj.closeBakingTray)

    %----------------------------------------------------------------------------------------
    %Menu
    obj.menu.sample = uimenu(obj.hFig,'Label','Sample');
    obj.menu.scanner = uimenu(obj.hFig,'Label','Scanner');
    obj.menu.tools = uimenu(obj.hFig,'Label','Tools');


    obj.menu.api = uimenu(obj.menu.sample,'Label','New Sample','Callback',@obj.newSample);
    obj.menu.api = uimenu(obj.menu.sample,'Label','Load Recipe','Callback', @obj.loadRecipe);
    obj.menu.api = uimenu(obj.menu.sample,'Label','Resume Acquisition', 'Callback', @obj.loadRecipe);
    obj.menu.api = uimenu(obj.menu.sample,'Label','Save recipe','Callback',@obj.saveRecipeToDisk);
    obj.menu.api = uimenu(obj.menu.tools,'Label','Generate support report','Callback',@(~,~) BakingTray.utils.generateSupportReport);
    obj.menu.api = uimenu(obj.menu.tools,'Label','Generate API handles','Callback',@obj.copyAPItoBaseWorkSpace);
    obj.menu.api = uimenu(obj.menu.tools,'Label','Reference Stages','Callback',@obj.referenceStages);


    %If the user runs ScanImage, prompt to connect to ScanImage
    %TODO: these menu items should react to whether or not the scanner is connected
    if isa(obj.model.scanner,'SIBT')
        obj.menu.connectScanImage = uimenu(obj.menu.scanner,'Label','Connect ScanImage','Callback',@obj.connectScanImage);
    elseif isa(obj.model.scanner,'dummyScanner')
        obj.menu.openDummyScanner = uimenu(obj.menu.scanner,'Label','Open dummy scanner','Callback',@(~,~) obj.model.scanner.createFigureWindow);
    else
        fprintf('BakingTray is configured to run without ScanImage\n')
    end


    obj.menu.armScanner = uimenu(obj.menu.scanner,'Label','Arm Scanner','Callback', @(~,~) obj.model.scanner.armScanner);
    obj.menu.disarmScanner = uimenu(obj.menu.scanner,'Label','Disarm Scanner','Callback', @(~,~) obj.model.scanner.disarmScanner);

    %TODO: this item should only appear if the scanner if ScanImage
    obj.menu.disarmScanner = uimenu(obj.menu.scanner,'Label','Show Fast Z Calib','Callback', @(~,~) obj.model.scanner.showFastZCalib);

    obj.menu.quit = uimenu(obj.menu.tools,'Label','Quit','Callback',@obj.closeBakingTray);


    %----------------------------------------------------------------------------------------
    %Basic status panel - directory selection and recipe loading
    commonButtonSettings={'Units', 'pixels', 'FontSize', obj.fSize, 'FontWeight', 'bold'};

    obj.basicSetupPanel = BakingTray.gui.newGenericGUIPanel([3.5, 410, 295, 55],obj.hFig);
    obj.button_chooseDir = uicontrol(...
        commonButtonSettings{:}, ...
        'Parent', obj.basicSetupPanel, ...
        'Position', [5, 28, 40, 20], ...
        'Callback',@obj.changeDir, ...
        'String', 'Dir');
    if ~obj.suppressToolTips
        obj.button_chooseDir.TooltipString='Choose sample directory';
    end


    obj.text_sampleDir = annotation(...
        obj.basicSetupPanel, 'textbox', ...
        'Units', 'pixels', ...
        'Position', [50,28,240,19] , ...
        'EdgeColor', [1,1,1]*0.5, ...
        'Color', 'w', ...
        'VerticalAlignment', 'middle',...
        'FontSize', obj.fSize, ...
        'FitBoxToText','off', ...
        'String', '');
    obj.updateSampleSavePathBox;



    obj.button_recipe = uicontrol(...
        commonButtonSettings{:}, ...
        'Parent', obj.basicSetupPanel, ...
        'Position', [5,4, 55, 20], ...
        'String', 'Recipe', ...
        'Callback', @obj.loadRecipe);

    if ~obj.suppressToolTips
        obj.button_recipe.TooltipString='Load recipe or resume an acquisition';
    end


    obj.text_recipeFname = annotation(...
         obj.basicSetupPanel, 'textbox', ...
        'Units', 'pixels', ...
        'Position', [65,4,225,19] , ...
        'EdgeColor', [1,1,1]*0.5, ...
        'Color', 'w', ...
        'VerticalAlignment', 'middle',...
        'FontSize', obj.fSize, ...
        'FitBoxToText','off', ...
        'String', '');
    %TODO: add a listener to this so it updates when the user loads a new recipe
    obj.updateRecipeFname;


    %Buttons for interfacing with hardware
    obj.hardwarePanel = BakingTray.gui.newGenericGUIPanel([3.5, 370, 295, 35],obj.hFig);

    obj.button_laser = uicontrol(...
        commonButtonSettings{:}, ...
        'Parent', obj.hardwarePanel, ...
        'Position', [10,6, 50, 20], ...
        'Callback',@obj.startLaserGUI, ...
        'String', 'Laser');

    if ~obj.suppressToolTips
        obj.button_laser.TooltipString='Start laser GUI';
    end
    %Disable the laser button if no laser is connected
    if ~obj.model.isLaserConnected
        obj.button_laser.Enable='off';
    end

    obj.button_prepare = uicontrol(...
        commonButtonSettings{:}, ...
        'Parent', obj.hardwarePanel, ...
        'Position', [65,6, 110, 20], ...
        'String', 'Prepare Sample', ...
        'Callback',@obj.startPrepareGUI);

    if ~obj.suppressToolTips
        obj.button_prepare.TooltipString='Cut and prepare sample for imaging';
    end

    obj.button_start = uicontrol(...
        commonButtonSettings{:}, ...
        'Parent', obj.hardwarePanel, ...
        'Position', [180,6, 70, 20], ...
        'Callback',@obj.startPreviewSampleGUI, ...
        'String', 'Preview', ....
        'ForegroundColor','k');

    if ~obj.suppressToolTips
        obj.button_start.TooltipString='Begin acquisition';
    end

    %Status panel
    obj.statusPanel = BakingTray.gui.newGenericGUIPanel([3.5, 275, 295, 90],obj.hFig);
    obj.text_status = annotation(...
         obj.statusPanel, 'textbox', ...
        'Units', 'pixels', ...
        'Position', [2,2,obj.statusPanel.Position(3:4)-4], ...
        'EdgeColor', 'none', ...
        'Color', 'w', ...
        'FontSize', obj.fSize, ...
        'FitBoxToText','off', ...
        'String', '');



    % Build the recipe panel
    % This contains a selection of recipe fields and talks bidirectionally to the recipe
    % object attached to BT.
    obj.recipePanel = BakingTray.gui.newGenericGUIPanel([3.5, 5, 295, 265],obj.hFig);
    obj.populateRecipePanel;


    %Fill it in with the recipe
    obj.updateAllRecipeEditBoxesAndStatusText;

    obj.connectRecipeListeners; %It's a method because we have to close and re-connect when we load a new recipe



    % Add non-recipe fields above the recipe fields. e.g. the tile size isn't part of the recipe
    % directly because it's associated with the scanning software is merely saved to the recipe when 
    % when acquisition starts. This isn't ideal, but it'll work for now (20/09/2017)
    commonNonRecipeTextEditSettings={'Parent', obj.recipePanel, ...
        'Style','edit', 'Units', 'pixels', 'FontSize', obj.fSize, ...
        'HorizontalAlignment', 'Left'}; %no callback defined here

    fieldIndex=12; %Index (counting from the bottom) of the position into which we will add a field

    obj.recipeTextLabels.other{end+1} = obj.makeRecipeLabel([-80,235,140,18], 'Tile Size');
    obj.recipeTextLabels.other{end}.VerticalAlignment='middle';

    obj.recipeEntryBoxes.other{end+1} = ...
        uicontrol(commonNonRecipeTextEditSettings{:}, ...
        'Position', [60, 237, 225, 17], ...
        'Tag', 'tilesize', 'String' ,'', 'Style', 'PopupMenu');

    if ~obj.suppressToolTips
        obj.recipeEntryBoxes.other{end}.TooltipString = ...
                 sprintf(['Instruct ScanImage to use this tile size (cols x rows) to use during acquisition.\n', ...
                                  'Note: that the current tile size and image resolution are listed in the status\n', ...
                                  'text and in ScanImage. These are the values the acquisition will follow.']);
    end

    % If we are using ScanImage and we find a frameSize file, populate the tile size property.
    % Otherwise disable and supply a message if needed. 
    obj.importFrameSizeSettings;

end %buildWindow
